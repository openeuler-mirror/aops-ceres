#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import os
import re
from collections import defaultdict
from typing import Dict, List, Tuple, Optional

from ceres.conf.constant import REPO_ID_FOR_CVE_MANAGE, CommandExitCode, TaskExecuteRes
from ceres.function.check import PreCheck
from ceres.function.log import LOGGER
from ceres.function.status import *
from ceres.function.util import execute_shell_command
from ceres.manages.collect_manage import Collect


def check_kernel_consistency() -> Optional[bool]:
    """
    Determine whether Linux uses the same kernel as the boot kernel

    Returns:
        Optional[bool]
    """
    # Example of regex matching result:
    # /boot/vmlinuz-5.10.0-60.18.0.50.oe2203.x86_64
    code, boot_kernel_version, stderr = execute_shell_command("grubby --default-kernel")
    if code != CommandExitCode.SUCCEED:
        LOGGER.error(stderr)
        return None

    # Example of regex matching result:
    # /5.10.0-60.18.0.50.oe2203.x86_64
    code, current_kernel_version, stderr = execute_shell_command("uname -r")
    if code != CommandExitCode.SUCCEED:
        LOGGER.error(stderr)
        return None

    return boot_kernel_version[14:] == current_kernel_version


class VulnerabilityManage:
    def repo_set(self, data: dict) -> int:
        """
        Save the repo source to local, and do simple verification.

        Args:
            data (dict): e.g
                {
                    "repo_info": {
                        "name": "string",
                        "dest": "save location",
                        "repo_content": "repo source info"
                    },
                    "check_items": ["string"],
                    "check": false
                }

        Returns:
            int: status code
        """
        repo_path = data.get("repo_info").get("dest")
        if re.match(r"/etc/yum.repos.d/[\w-]+.repo$", repo_path) is None:
            LOGGER.debug('Incorrect repo save path.')
            return PARAM_ERROR

        content = data.get("repo_info").get("repo_content")
        with open(repo_path, 'w', encoding='utf8') as repo_file:
            repo_file.write(content)
            LOGGER.info(f'Repo source {data.get("repo_info").get("name")} ' f'has been saved to {repo_path}.')

        if self._validate_repo_source(REPO_ID_FOR_CVE_MANAGE):
            LOGGER.info('Repo source set succeed.')
            return SUCCESS
        os.remove(data.get("repo_info").get("dest"))
        LOGGER.warning("Repo source can't be used, it has been deleted.")
        return REPO_CONTENT_INCORRECT

    @staticmethod
    def _validate_repo_source(repo_id: str) -> bool:
        """
        A sample validate which repo can used by yum.

        Args:
            repo_id(str): repo id

        Returns:
            bool
        """
        code, _, _ = execute_shell_command(f"yum repoinfo --repo {repo_id}")
        return code == CommandExitCode.SUCCEED

    def cve_scan(self, cve_scan_args: dict) -> Tuple[str, dict]:
        """
        query vulnerability info in the machine

        Args:
            cve_scan_args(dict): e.g
                {
                    check_items: ["network"]
                }

            check_items: Items that need to be checked before execution.

        Returns:
            int: status code
            dict: e.g
                {
                    "check_items": [{
                        "item": "network",
                        "result":False,
                        "log":"check log"
                        }],
                    "unfixed_cves": [{
                        "cve_id": "CVE-2023-1513",
                        "installed_rpm": "kernel-4.19.90-2304.1.0.0131.oe1.x86_64",
                        "available_rpm": "kernel-4.19.90-2304.1.0.0196.oe1.x86_64",
                        "support_way": "coldpatch",
                        }],
                    "fixed_cves": [
                        {
                            "cve_id": "CVE-2023-1112",
                            "installed_rpm":"redis-4.2.5-1.oe2203.x86_64",
                            "fix_way": "hotpatch",
                            "hp_status": "ACCEPTED" //only hotpatch has the field
                        },
                        {
                            "cve_id": "CVE-2023-1112",
                            "installed_rpm":"redis-4.2.5-1.oe2203.x86_64",
                            "fix_way": "coldpatch"
                        }
                    ]
                }
        """
        cve_scan_result = {}

        check_result, items_check_log = PreCheck.execute_check(cve_scan_args.get("check_items"))
        cve_scan_result["check_items"] = items_check_log
        if not check_result:
            LOGGER.info("The pre-check is failed before execute command!")
            return PRE_CHECK_ERROR, cve_scan_result

        self.installed_rpm_info = self._query_installed_rpm()
        self.available_hotpatch_key_set = set()

        cve_scan_result.update(
            {
                "check_items": items_check_log,
                "unfixed_cves": self._query_unfixed_cves_by_dnf_plugin() or self._query_unfixed_cves_by_dnf(),
                "fixed_cves": self._query_fixed_cves_by_dnf_plugin() or self._query_fixed_cves_by_dnf(),
            }
        )
        return SUCCESS, cve_scan_result

    @staticmethod
    def _query_installed_rpm():
        """
        query installed rpm package info

        Returns:
            dict: all rpm info. e.g
                {
                    "kernel":"kernel-5.10.0-60.92.0.116.oe2203.aarch64"
                }
        """
        rpm_info_dict = {}
        # Example of command execution result:
        # openldap:openldap-2.4.50-6.oe1.x86_64
        # kernel:kernel-4.19.90-2310.3.0.0222.oe1.x86_64
        # systemtap-runtime:systemtap-runtime-4.3-2.oe1.x86_64
        # perl-Net-SSLeay:perl-Net-SSLeay-1.88-5.oe1.x86_64
        # powertop:powertop-2.9-12.oe1.x86_64
        # libusbx:libusbx-1.0.23-1.oe1.x86_64
        code, stdout, _ = execute_shell_command(
            """
        rpm -qa --queryformat '%{NAME}:%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n' | grep kernel
        """
        )
        if code != CommandExitCode.SUCCEED or not stdout:
            LOGGER.error("query installed packages info failed!")
            return rpm_info_dict

        for line in stdout.splitlines():
            rpm_name, rpm_info = line.split(":", 1)
            rpm_info_dict[rpm_name] = rpm_info

        rpm_info_dict["kernel"] = (
            f"kernel-{Collect.get_current_kernel_version()}" if Collect.get_current_kernel_version() else ""
        )

        LOGGER.debug("query installed rpm package info succeed!")
        return rpm_info_dict

    def _query_unfixed_cves_by_dnf(self) -> list:
        """
        parse unfixed kernel vulnerability info by dnf (coldpatch)

        Return:
            str: command execute result
            list: cve info e.g
                [{
                    "cve_id": "CVE-2023-1513",
                    "installed_rpm": "kernel-4.19.90-2304.1.0.0131.oe1.x86_64",
                    "available_rpm": "kernel-4.19.90-2304.1.0.0196.oe1.x86_64",
                    "support_way": "coldpatch",
                }]

        """
        # Example of command execution result:
        # Last metadata expiration check: 0:26:36 ago on Mon 07 Aug 2023 10:26:32 AM CST.
        # CVE-2021-43976  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        # CVE-2021-0941   Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        # CVE-2021-45469  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        # CVE-2021-44733  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        unfixed_cves = []
        code, stdout, stderr = execute_shell_command("dnf updateinfo list cves | grep kernel")
        if code != CommandExitCode.SUCCEED:
            LOGGER.error("query unfixed cve info failed by dnf!")
            LOGGER.error(stderr)
            return unfixed_cves

        # Example of regex matching result:
        # [
        # ("CVE-2021-43976", "Important/Sec.", "kernel-4.19.90-2201.1.0.0132.oe1.x86_64"),
        # ("CVE-2021-0941", "Important/Sec.", "kernel-4.19.90-2201.1.0.0132.oe1.x86_64")
        # ]
        all_cve_info = re.findall(r"(CVE-\d{4}-\d+)\s+([\w+/.]+)\s+(kernel-\d\S+)", stdout)
        if not all_cve_info:
            return unfixed_cves

        for cve_id, _, coldpatch in all_cve_info:
            rpm_name = coldpatch.rsplit("-", 2)[0]
            unfixed_cves.append(
                {
                    "cve_id": cve_id,
                    "installed_rpm": self.installed_rpm_info.get(rpm_name),
                    "available_rpm": coldpatch,
                    "support_way": "coldpatch",
                }
            )
        return unfixed_cves

    def _query_unfixed_cves_by_dnf_plugin(self) -> list:
        """
        parse unfixed kernel vulnerability info by dnf hotpatch plugin (hotpatch and coldpatch)

        Return:
            str: command execute result
            list: cve info e.g
                [{
                    "cve_id": "CVE-2023-1513",
                    "installed_rpm": "kernel-4.19.90-2304.1.0.0131.oe1.x86_64",
                    "available_rpm": "kernel-4.19.90-2304.1.0.0196.oe1.x86_64",
                    "support_way": "coldpatch",
                }]
        """

        def generate_single_vulnerability_info(
            rpm_name: str, support_way: str, available_rpm: str, hotpatch: str = None
        ):
            if support_way != "hotpatch":
                return {
                    "cve_id": cve_id,
                    "installed_rpm": self.installed_rpm_info.get(rpm_name),
                    "available_rpm": available_rpm,
                    "support_way": support_way,
                }
            return {
                "cve_id": cve_id,
                "installed_rpm": self.installed_rpm_info.get(rpm_name),
                "available_rpm": hotpatch,
                "support_way": support_way,
            }

        # Example of command execution result:
        # Last metadata expiration check: 0:31:50 ago on Mon 07 Aug 2023 10:26:32 AM CST.
        # CVE-2023-1981   Moderate/Sec.  avahi-libs-0.8-9.oe1.x86_64                     -
        # CVE-2021-42574  Important/Sec. binutils-2.34-19.oe1.x86_64                     -
        # CVE-2023-1513   Important/Sec. kernel-4.19.90-2304.1.0.0196.oe1.x86_64         patch-kernel-4.19.90-2112...
        cve_info_list = []
        code, stdout, stderr = execute_shell_command("dnf hot-updateinfo list cves | grep kernel")
        if code != CommandExitCode.SUCCEED:
            LOGGER.error("query unfixed cve info failed by dnf!")
            LOGGER.error(stderr)
            return cve_info_list

        # Example of regex matching result:
        # [
        # ("CVE-2023-1513", "Important/Sec.", "kernel-4.19.90-2304.1.0.0196.oe1.x86_64", "patch-kernel-4.19.90-2112.."),
        # ("CVE-2021-xxxx", "Important/Sec.", "-", "patch-redis-6.2.5-1-SGL_CVE_2023_1111_CVE_2023_1112-1-1.x86_64")
        # ]
        all_cve_info = re.findall(r"(CVE-\d{4}-\d+)\s+([\w+/.]+)\s+(kernel-\d\S+|-)\s+(patch-kernel-\d\S+|-)", stdout)
        if not all_cve_info:
            return cve_info_list

        coldpatch_key_set, unavailable_hotpatch_key_set = set(), set()
        for cve_id, _, coldpatch, hotpatch in all_cve_info:
            rpm_name = coldpatch.rsplit("-", 2)[0]
            key = f"{cve_id}-{rpm_name}"
            if hotpatch != "-":
                if coldpatch == "-":
                    try:
                        # Example of hotpatch rpm name:
                        # patch-redis-6.2.5-1-SGL_CVE_2023_1111_CVE_2023_1112-1-1.x86_64
                        rpm_name = hotpatch.rsplit("-", 5)[0].split("-", 1)[1]
                    except IndexError as error:
                        LOGGER.warning(error)
                        rpm_name = ""
                    key = f"{cve_id}-{rpm_name}"

                cve_info_list.append(generate_single_vulnerability_info(rpm_name, "hotpatch", coldpatch, hotpatch))
                self.available_hotpatch_key_set.add(key)

            if coldpatch != "-" and key not in coldpatch_key_set:
                cve_info_list.append(generate_single_vulnerability_info(rpm_name, "coldpatch", coldpatch))
                coldpatch_key_set.add(key)

            if (coldpatch == "-") and (hotpatch == "-") and (key not in unavailable_hotpatch_key_set):
                cve_info_list.append(generate_single_vulnerability_info(rpm_name, None, coldpatch))
                unavailable_hotpatch_key_set.add(key)

        return cve_info_list

    def _query_fixed_cves_by_dnf(self) -> list:
        """
        parse the fixed kernel vulnerability info by dnf

        Return:
            str: command execute result
            list: cve info e.g
                [
                    {"cve_id": "CVE-XXXX-XXXX","installed_rpm": "kernel-version-release.arch", "fix_way":"coldpatch"},
                ]

        """
        # Example of command execution result:
        # Last metadata expiration check: 0:26:36 ago on Mon 07 Aug 2023 10:26:32 AM CST.
        # CVE-2021-43976  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        # CVE-2021-0941   Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        # CVE-2021-45469  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        # CVE-2021-44733  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
        fixed_cves = []
        current_kernel_version = Collect.get_current_kernel_version()
        if not current_kernel_version:
            return fixed_cves
        current_kernel_rpm_name = f"kernel-{current_kernel_version}"

        code, stdout, stderr = execute_shell_command("dnf updateinfo list cves --installed |grep kernel")
        if code != CommandExitCode.SUCCEED:
            LOGGER.error("query fixed cve info failed!")
            LOGGER.error(stderr)
            return fixed_cves

        # Example of regex matching result:
        # [
        # ("CVE-2021-43976","Important/Sec.", "kernel-4.19.90-2201.1.0.0132.oe1.x86_64"),
        # ("CVE-2021-0941","Important/Sec.", "kernel-4.19.90-2201.1.0.0132.oe1.x86_64")
        # ]
        fixed_cves_info = re.findall(r"(CVE-\d{4}-\d+)\s+([\w+/.]+)\s+(kernel-\d\S+)", stdout)

        if not fixed_cves_info:
            return fixed_cves

        for cve_id, _, coldpatch in fixed_cves_info:
            if coldpatch <= current_kernel_rpm_name:
                fixed_cves.append(
                    {
                        "cve_id": cve_id,
                        "installed_rpm": self.installed_rpm_info.get(coldpatch.rsplit("-", 2)[0]),
                        "fix_way": "coldpatch",
                    }
                )
        return fixed_cves

    def _query_fixed_cves_by_dnf_plugin(self) -> list:
        """
        parse the fixed kernel vulnerability info by dnf plugin

        Return:
            list: hotpatch info list. e.g
                [{"cve_id": "CVE-XXXX-XXXX", "fix_way": "hotpatch", "hp_status": "ACCEPTED", "installed_rpm":"xxxx"}]

        """
        # Example of command execution result:
        # Last metadata expiration check: 0:31:50 ago on Mon 07 Aug 2023 10:26:32 AM CST.
        # CVE-2023-1981   Moderate/Sec.  avahi-libs-0.8-9.oe1.x86_64                     -
        # CVE-2021-42574  Important/Sec. binutils-2.34-19.oe1.x86_64                     -
        # CVE-2023-1513   Important/Sec. kernel-4.19.90-2304.1.0.0196.oe1.x86_64         patch-kernel-4.19.90-2112...
        current_kernel_version = Collect.get_current_kernel_version()
        if not current_kernel_version:
            return []
        current_kernel_rpm_name = f"kernel-{current_kernel_version}"

        code, stdout, stderr = execute_shell_command("dnf hot-updateinfo list cves --installed | grep kernel")
        if code != CommandExitCode.SUCCEED:
            LOGGER.error("query unfixed cve info failed by dnf!")
            LOGGER.error(stderr)
            return []

        # Example of regex matching result:
        # [
        # ("CVE-2023-1513", "Important/Sec.", "kernel-4.19.90-2304.1.0.0196.oe1.x86_64", "patch-kernel-4.19.90-2112.."),
        # ("CVE-2021-xxxx", "Important/Sec.", "-", "patch-redis-6.2.5-1-SGL_CVE_2023_1111_CVE_2023_1112-1-1.x86_64")
        # ]
        hotpatch_status = self._query_applied_hotpatch_status()
        all_cve_info = re.findall(r"(CVE-\d{4}-\d+)\s+([\w+/.]+)\s+(kernel-\d\S+|-)\s+(patch-kernel-\d\S+|-)", stdout)

        cve_info_fixed_by_coldpatch, cve_info_fixed_by_hotpatch, hotpatch_dic = [], [], defaultdict(str)
        for cve_id, _, coldpatch, hotpatch in all_cve_info:
            if hotpatch == "-":
                if coldpatch > current_kernel_rpm_name:
                    continue
                cve_info_fixed_by_coldpatch.append(
                    {
                        "cve_id": cve_id,
                        "installed_rpm": self.installed_rpm_info.get(coldpatch.rsplit("-", 2)[0]),
                        "fix_way": "coldpatch",
                    }
                )
            else:
                cve_info_fixed_by_hotpatch.append({"cve_id": cve_id, "fix_way": "hotpatch", "installed_rpm": hotpatch})

                hotpatch_dic_key = hotpatch.rsplit("-", 2)[0]
                if hotpatch_dic_key.endswith("ACC"):
                    hotpatch_dic[hotpatch_dic_key] = max(hotpatch, hotpatch_dic.get(hotpatch_dic_key, hotpatch))

        for cve_info in cve_info_fixed_by_hotpatch:
            hotpatch_dic_key = cve_info["installed_rpm"].rsplit("-", 2)[0]

            if hotpatch_dic_key in hotpatch_dic:
                cve_info["installed_rpm"] = hotpatch_dic[hotpatch_dic_key]
            cve_info["hp_status"] = hotpatch_status.get(cve_info["installed_rpm"].rsplit(".", 1)[0], "")

        return cve_info_fixed_by_coldpatch + cve_info_fixed_by_hotpatch

    def _query_applied_hotpatch_status(self) -> Dict[str, str]:
        """
        query applied hotpatch with its status

        Return:
            dict: key is hotpatch name, value is its status. e.g {"patch-redis-6.2.5-1-ACC-1-3": "ACTIVED"}

        """
        # Example of command execution result:
        # Last metadata expiration check: 0:28:36 ago on Mon 07 Aug 2023 10:26:32 AM CST.
        # CVE-id        base-pkg/hotpatch                                                 status
        # CVE-2023-1111 redis-6.2.5-1/ACC-1-1/redis-benchmark                             ACTIVED
        # CVE-2023-1112 redis-6.2.5-1/ACC-1-1/redis-benchmark                             ACTIVED
        # CVE-2023-1111 redis-6.2.5-1/ACC-1-1/redis-cli                                   ACTIVED
        # CVE-2023-1112 redis-6.2.5-1/ACC-1-1/redis-cli                                   ACTIVED
        # CVE-2023-1111 redis-6.2.5-1/ACC-1-1/redis-server                                NOT-APPLIED
        # CVE-2023-1112 redis-6.2.5-1/ACC-1-1/redis-server                                NOT-APPLIED
        # CVE-2023-2221 redis-6.2.5-1/ACC-1-2/redis-cli                                   NOT-APPLIED
        # CVE-2023-2222 redis-6.2.5-1/ACC-1-2/redis-cli                                   NOT-APPLIED
        # CVE-2023-1111 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-benchmark NOT-APPLIED
        # CVE-2023-1112 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-benchmark NOT-APPLIED
        # CVE-2023-1111 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-cli       NOT-APPLIED
        # CVE-2023-1112 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-cli       NOT-APPLIED
        # CVE-2023-1111 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-server    NOT-APPLIED
        # CVE-2023-1112 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-server    NOT-APPLIED
        result = {}
        code, stdout, stderr = execute_shell_command("dnf hotpatch --list cves")
        if code != CommandExitCode.SUCCEED:
            LOGGER.error("query applied hotpatch info failed!")
            LOGGER.error(stderr)
            return result

        # Example of regex matching result:
        # [
        # ("CVE-2023-1112", "redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-server", "NOT-APPLIED"),
        # ("CVE-2023-1111", "redis-6.2.5-1/ACC-1-1/redis-benchmark", "ACTIVED")
        # ]
        applied_hotpatch_info_list = re.findall(r"(CVE-\d{4}-\d+)\s+(kernel-\d[\w\-/.]+)\s+([A-W]+)", stdout)

        if not applied_hotpatch_info_list:
            return result

        record_key_set = set()
        for cve_id, patch_name, hotpatch_status in applied_hotpatch_info_list:
            rpm = patch_name.split("-", 1)[0]
            # Refer to this example, the CVE can be marked as fixed only if all hotpatch are applied.
            # CVE-id        base-pkg/hotpatch                                                 status
            # CVE-2023-1111 redis-6.2.5-1/ACC-1-1/redis-benchmark                             ACTIVED
            # CVE-2023-1111 redis-6.2.5-1/ACC-1-1/redis-cli                                   ACTIVED
            # CVE-2023-1111 redis-6.2.5-1/ACC-1-1/redis-server                                NOT-APPLIED
            record_key = f"{cve_id}-{rpm}"
            if (
                (record_key not in self.available_hotpatch_key_set)
                and (hotpatch_status in ("ACTIVED", "ACCEPTED"))
                and record_key not in record_key_set
            ):
                result[f"patch-{patch_name.rsplit('/',1)[0].replace('/','-')}"] = hotpatch_status
                record_key_set.add(record_key)
        return result

    def cve_fix(self, unfixed_cve_info: dict) -> Tuple[str, dict]:
        """
        fix cves by upgrading packages

        Args:
            unfixed_cve_info(dict): cve info which need to fix and check_items,e.g.
            {
                "check_items": ["network"],
                "accepted": true,
                "takeover": true,
                "cves": [
                    {
                        "cve_id": "cve1",
                        "rpms":[
                            {
                                "installed_rpm": "kernel-4.19xxx",
                                "available_rpm": "kernel-4.19xxx-new-release",
                                "fix_way": "coldpatch"
                            }
                        ]
                    }
                ]
            }
        Returns:
            str: cve fix result
            list: e.g
                {
                    "check_items":[
                        {
                            "item":"network",
                            "result":true,
                            "log":"xxxx"
                        }
                    ],
                    "cves": [
                        {
                            "cve_id": "CVE-2021-3781",
                            "result": "succeed",
                            "rpms":[
                                {
                                    "installed_rpm":"kernel-4.19xxx",
                                    "result": "succeed",
                                    "log": "fix succeed"
                                }
                            ]
                        }
                    ]
                }
        """

        def gen_failed_result(cves: dict, log: str):
            result = []
            for cve in cves:
                cve_fix_result = {"cve_id": cve.get("cve_id"), "result": TaskExecuteRes.FAIL, "rpms": []}
                for rpm in cve.get("rpms"):
                    cve_fix_result["rpms"].append(
                        {"installed_rpm": rpm.get("installed_rpm"), "result": TaskExecuteRes.FAIL, "log": log}
                    )
                result.append(cve_fix_result)
            return result

        result = {}
        self.accepted, self.takeover = unfixed_cve_info.get("accepted"), unfixed_cve_info.get("takeover")
        check_result, items_check_log = PreCheck.execute_check(unfixed_cve_info.get("check_items"))
        result["check_items"] = items_check_log
        if not check_result:
            LOGGER.info("The pre-check is failed before execute command!")
            result["cves"] = gen_failed_result(unfixed_cve_info.get("cves"), "pre-check items check failed")
            return PRE_CHECK_ERROR, result

        all_cve_fix_result, all_cve_fix_info = [], []
        for cve_info in unfixed_cve_info.get("cves"):
            rpms_fix_result, rpm_fix_result_list = [], []
            for rpm_info in cve_info.get("rpms"):
                update_result, log = self._update_rpm_by_dnf(rpm_info)
                rpms_fix_result.append(update_result == TaskExecuteRes.SUCCEED)
                rpm_fix_result_list.append(
                    {"installed_rpm": rpm_info.get("installed_rpm"), "result": update_result, "log": log}
                )

            all_cve_fix_result.append(all(rpms_fix_result))
            all_cve_fix_info.append(
                {
                    "cve_id": cve_info.get("cve_id"),
                    "result": TaskExecuteRes.SUCCEED if all(rpms_fix_result) else TaskExecuteRes.FAIL,
                    "rpms": rpm_fix_result_list,
                }
            )

        result.update({"cves": all_cve_fix_info})
        return SUCCESS if all(all_cve_fix_result) else FAIL, result

    def _update_rpm_by_dnf(self, cve: dict) -> Tuple[str, str]:
        """
        udpate rpm by dnf update or dnf hot-update

        Args:
            cve(dict): e.g
                {
                    "installed_rpm": "kernel-4.19xxx",
                    "available_rpm": "kernel-4.19xxx-new-release",
                    "fix_way": "coldpatch"
                }
        Returns:
            Tuple[str, str]
            a tuple containing two elements (update result, log).
        """
        if cve.get("fix_way") == "coldpatch":
            update_result, log = self._update_coldpatch_by_dnf(cve.get("installed_rpm").rsplit("-", 2)[0])
        else:
            update_result, log = self._update_hotpatch_by_dnf_plugin(cve.get("available_rpm"))
        return update_result, log

    @staticmethod
    def _update_coldpatch_by_dnf(rpm_name: str) -> Tuple[str, str]:
        """
        update rpm by dnf (coldpatch)

        Args:
            rpm_name(str): rpm name which need to update.

        Returns:
            Tuple[str, str]
            a tuple containing two elements (update result, log).
        """
        code, stdout, stderr = execute_shell_command(f"dnf upgrade-en {rpm_name} -y")
        log = stdout + stderr
        if code != CommandExitCode.SUCCEED:
            return TaskExecuteRes.FAIL, log
        if "Complete" not in log:
            return TaskExecuteRes.FAIL, log
        return TaskExecuteRes.SUCCEED, log

    def _update_hotpatch_by_dnf_plugin(self, hotpatch_pkg: str) -> Tuple[str, str]:
        """
        update rpm by dnf plugin (hotpatch)

        Args:
            hotpatch(str):  hotpatch name which need to install.
                            e.g. patch-redis-6.2.5-1-SGL_CVE_2023_1111_CVE_2023_1112_1_1.x86_64

        Returns:
            Tuple[str, str]
            a tuple containing two elements (update result, log).
        """
        if self.takeover:
            update_command = f"dnf hotupgrade {hotpatch_pkg} --takeover -y"
        else:
            update_command = f"dnf hotupgrade {hotpatch_pkg} -y"

        code, stdout, stderr = execute_shell_command(update_command)
        log = stdout + stderr
        if code != CommandExitCode.SUCCEED:
            return TaskExecuteRes.FAIL, log

        if "Apply hot patch succeed" not in stdout and "No hot patches marked for install" not in stdout:
            return TaskExecuteRes.FAIL, log

        if not self.takeover and self.accepted:
            try:
                hotpatch_name = hotpatch_pkg.rsplit(".", 1)[0].split("-", 1)[1]
                _, hotpatch_status_set_log = self._set_hotpatch_status_by_dnf_plugin(hotpatch_name, "accept")
                log += f"\n\n{hotpatch_status_set_log}"
            except IndexError as error:
                LOGGER.error(error)
                log += f"\n\nhotpatch status set failed due to can't get correct hotpatch name!"

        return TaskExecuteRes.SUCCEED, log

    @staticmethod
    def _set_hotpatch_status_by_dnf_plugin(hotpatch: str, operation: str) -> Tuple[bool, str]:
        """
        change hotpatch status by dnf plugin

        Args:
            hotpatch(str):  hotpatch name which you want to change its status
            operation(str): the action that needs to be performed on this hot patch.
                            supported actions: apply,deactive,remove,active,accept
        Returns:
            Tuple[bool, str]
            a tuple containing two elements (operation result, operation log).
        """

        # replace -ACC to /ACC or -SGL to /SGL
        # Example: kernel-5.10.0-153.12.0.92.oe2203sp2-ACC-1-1 >> kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1
        wait_to_remove_patch = re.sub(r'-(ACC|SGL)', r'/\1', hotpatch)
        # Example of command execution result:
        # Succeed:
        # [root@openEuler ~]# dnf hotpatch --remove kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1
        # Last metadata expiration check: 3:24:16 ago on Wed 13 Sep 2023 08:16:17 AM CST.
        # Gonna remove this hot patch: kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1
        # remove hot patch 'kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1' succeed
        # Fail:
        # [root@openEuler ~]# dnf hotpatch --accept kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1
        # Last metadata expiration check: 3:25:24 ago on Wed 13 Sep 2023 08:16:17 AM CST.
        # Gonna accept this hot patch: kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1
        # accept hot patch 'kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1' failed, remain original status
        code, stdout, stderr = execute_shell_command(f"dnf hotpatch --{operation} {wait_to_remove_patch}")
        if code != CommandExitCode.SUCCEED or 'failed' in stdout:
            LOGGER.error(f"hotpatch {hotpatch} set status failed!")
            return False, stdout + stderr

        return True, stdout + stderr

    def cve_rollback(self, cves: List[dict]) -> Tuple[str, list]:
        """
        cve rollback

        Args:
            cves(list): cve list which need to rollback,e.g.
                [{
                    "cve_id": "CVE-1-1",
                    "hotpatch": True
                }]

        Returns:
            str: status code
            list: e.g
                [{
                    "cve_id": cve,
                    "result": "succeed",
                    "log": "rollback succeed"
                }]

        """

        if not self._validate_repo_source(REPO_ID_FOR_CVE_MANAGE):
            return REPO_NOT_SET, [
                dict(cve_id=cve["cve_id"], log=StatusCode.mapping[REPO_NOT_SET]['msg'], result="fail") for cve in cves
            ]

        return self._cve_rollback(cves)

    def _cve_rollback(self, cves: List[dict]) -> Tuple[str, list]:
        """
        Roll back a restored cve

        Args:
            cves(list): cve list which need to rollback,e.g.
                [{
                    "cve_id": "CVE-1-1",
                    "hotpatch": True
                }]

        Returns:
            str: status code
            list: e.g
                [{
                    "cve_id": cve,
                    "result": "succeed",
                    "log": "rollback succeed"
                }]

        """
        hotpatch_list = self._hotpatch_list_cve()
        if not hotpatch_list:
            log = "No valid hot patch is matched."
            return NOT_PATCH, [dict(cve_id=cve["cve_id"], log=log, result="fail") for cve in cves]

        wait_to_rollback_patch = set()
        for cve_info in cves:
            wait_to_rollback_patch = wait_to_rollback_patch.union(hotpatch_list.get(cve_info["cve_id"], set()))

        hotpatch_rollback_res = {}
        for patch in set(wait_to_rollback_patch):
            rollback_result, log = self._hotpatch_remove(patch)
            hotpatch_rollback_res[patch] = {
                "result": TaskExecuteRes.SUCCEED if rollback_result else TaskExecuteRes.FAIL,
                "log": log,
            }

        cve_rollback_result = []

        for cve_info in cves:
            if cve_info["cve_id"] not in hotpatch_list:
                fail_result = {
                    "cve_id": cve_info["cve_id"],
                    "log": "No valid hot patch is matched."
                    if cve_info["hotpatch"]
                    else "Cold patch rollback is not supported.",
                    "result": "fail",
                }
                cve_rollback_result.append(fail_result)
            else:
                tmp_result_list = []
                tmp_log = []

                for patch in hotpatch_list.get(cve_info["cve_id"]):
                    tmp_result_list.append(hotpatch_rollback_res[patch]["result"] == TaskExecuteRes.SUCCEED)
                    tmp_log.append(hotpatch_rollback_res[patch]["log"])

                cve_rollback_result.append(
                    {
                        "cve_id": cve_info["cve_id"],
                        "log": "\n".join(tmp_log),
                        "result": TaskExecuteRes.SUCCEED if all(tmp_result_list) else TaskExecuteRes.FAIL,
                    }
                )

        return SUCCESS, cve_rollback_result

    @staticmethod
    def _hotpatch_list_cve() -> dict:
        """
        Run the dnf hotpatch list cve command to query the hotpatch list corresponding to the cve

        Returns:
            dict: e.g
                {
                    "CVE-XXXX-XXX": {"patch 1", "patch 2"}
                }
        """
        code, stdout, _ = execute_shell_command(f"dnf hot-updateinfo list cves --installed|grep patch")
        if code != CommandExitCode.SUCCEED:
            LOGGER.error(f"Failed to hotpatch list cve.")
            return None

        all_cve_info = re.findall(r"(CVE-\d{4}-\d+)\s+([\w+/.]+)\s+(\S+|-)\s+(patch\S+)", stdout)
        if not all_cve_info:
            LOGGER.error(f"Failed to hotpatch list cve.")
            return None

        applied_hotpatch_info = {}
        hotpatch_dic = {}
        for cve_id, _, _, hotpatch in all_cve_info:
            applied_hotpatch_info[cve_id] = hotpatch
            hotpatch_dic_key = hotpatch.rsplit("-", 2)[0]
            if hotpatch_dic_key.endswith("ACC"):
                hotpatch_dic[hotpatch_dic_key] = max(hotpatch, hotpatch_dic.get(hotpatch_dic_key, hotpatch))

        for cve_id, cmd_output_hotpatch in applied_hotpatch_info.items():
            applied_hotpatch_info[cve_id] = hotpatch_dic.get(cmd_output_hotpatch.rsplit("-", 2)[0], cmd_output_hotpatch)

        hotpatch_list = defaultdict(set)
        for cve_id, hotpatch in applied_hotpatch_info.items():
            hotpatch_list[cve_id].add(hotpatch)

        return hotpatch_list

    def _hotpatch_remove(self, hotpatch: str) -> Tuple[bool, str]:
        """
        remove hotpatch package

        Args:
            hotpatch: hotpatch package which needs to remove
        """
        cmd = f"dnf remove {hotpatch} -y"
        _, stdout, stderr = execute_shell_command(cmd)
        return True, f"Command:{cmd}\n\n{stdout}\n{stderr}\n"
